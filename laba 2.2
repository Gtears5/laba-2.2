#include <stdlib.h>
#include <iostream>
#include<ctime>
#include <chrono>
using namespace std;

class List                              //Создаем тип данных Список
{
    int x, count;
    List* head, * tail, * next, * prev;                 //Указатели на адреса начала списка и его конца
public:
    List() :head(0), tail(0) {};    //Инициализируем адреса как пустые
    ~List();                           //Прототип деструктора
    void Show();                       //Прототип функции отображения списка на экране
    void Add(int x);                   //Прототип функции добавления элементов в список
    void AddFirst(int x);              //Прототип функции добавления в элемента в начало
    void Input(int a, int b);         
    void DelIndex(int z);
    void GetIndex(int index3);
    void Swap(int index, int index2);
};

void List::AddFirst(int x) {
    List* temp = new List;
    temp->next = 0;                   //Указываем, что изначально по следующему адресу пусто
    temp->prev = 0;
    temp->x = x;
    count += 1;
    if (head != 0) {                  //Если список не пустой
        head->prev = temp;               //Предыдущий перый элемент теперь указывает на новый первый элемент
        temp->next = head;               //Указываем на предыдущий первый элемент
        head = temp;                     //Переназначаем первый элемент
    }
    else {                          //Если список пустой
        head = tail = temp;
    }
}

List::~List()                           //Деструктор
{
    while (head)                       //Пока по адресу на начало списка что-то есть
    {
        tail = head->next;             //Резервная копия адреса следующего звена списка
        delete head;                   //Очистка памяти от первого звена
        head = tail;                   //Смена адреса начала на адрес следующего элемента
    }
}

void List::Add(int x)
{
    List* temp = new List;               //Выделение памяти под новый элемент структуры
    temp->next = 0;                   //Указываем, что изначально по следующему адресу пусто
    temp->x = x;                         //Записываем значение в структуру
    count += 1;
    if (head != 0)                    //Если список не пуст
    {
        tail->next = temp;               //Указываем адрес следующего за хвостом элемента
        temp->prev = tail;               //Указываем адрес на предыдущий элемент в соотв. поле
        tail = temp;                     //Меняем адрес хвоста
    }
    else //Если список пустой
    {
        temp->prev = 0;               //Предыдущий элемент указывает в пустоту
        head = tail = temp;              //Голова=Хвост=тот элемент, что сейчас добавили
    }
}

void List::Show()
{
    List* temp = new List;
    temp = head;                       //Временно указываем на адрес первого элемента
    while (temp != 0)              //Пока не встретим пустое значение
    {
        cout << temp->x << " ";        //Выводим каждое считанное значение на экран
        temp = temp->next;             //Смена адреса на адрес следующего элемента
    }
    cout << "\n";
}

void List::Input(int a, int b) {
    if (a == count + 1)
        Add(b);
    else {
        List* temp = new List; //создание нового элемента
        temp->x = b; //присвоение элементу значения
        if (head == 0) //если список пуст
        {
            temp->next = temp; //установка указателя next
            temp->prev = temp; //установка указателя prev
            head = temp; //определяется голова списка
        }
        else
        {
            List* p = head;
            for (int i = a; i > 1; i--)
                p = p->next;
            p->prev->next = temp;
            temp->prev = p->prev;
            temp->next = p;
            p->prev = temp;
        }
    }
}

void List::DelIndex(int z)
{
    int k = 1;
    List* Del = head;
    while (k < z)
    {
        Del = Del->next;
        k++;
    }
    List* PrevDel = Del->prev;
    List* AfterDel = Del->next;

    // Если удаляем не голову
    if (PrevDel != 0 && count != 1)
        PrevDel->next = AfterDel;
    // Если удаляем не хвост
    if (AfterDel != 0 && count != 1)
        AfterDel->prev = PrevDel;

    // Удаление головы/хвоста
    if (z == 1)
        head = AfterDel;
    if (z == count)
        tail = PrevDel;

    delete Del;
    count--;
}

void List::GetIndex(int index3) {
    List* temp = new List;
    temp = head;
    int i = 0;

    while (temp && i < index3) {
        temp = temp->next;
        i++;
    }

    cout << temp->x << endl;
}

void List::Swap(int index, int index2)
{
    List* temp = new List;
    temp = head;
    for (int i = 0; i < index; i++)
    {
        temp = temp->next;

    }
    List* temp1 = new List;
    temp1 = head;
    for (int i = 0; i < index2; i++)
    {
        temp1 = temp1->next;
    }
    int k = temp->x;
    temp->x = temp1->x;
    temp1->x = k;
}

int main()
{
    List lst; //Объявляем переменную, тип которой есть список
    int choice, choice2;
    int a, b, z, c, n;
    srand(time(0));
    setlocale(0, "");

    while (true)
    {
        auto start = chrono::steady_clock::now();
        auto end = chrono::steady_clock::now();
        cout << "          Меню\n" <<
            "1 - Вводите количество элементов в списке, который будет автоматически заполняться случайными числами (0 до 99)\n" <<
            "2 - Вводите в консоль элементы списка\n" <<
            "3 - Работа с элементами двусвязного списка\n" <<
            "4 - Выйти из программы\n" << endl;
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Введите количество элементов в списке: \n";
            cin >> n;
            start = chrono::steady_clock::now();
            for (int i = 0; i < n; i++)
                lst.Add(rand() % 99);
            end = chrono::steady_clock::now();
            lst.Show();
            cout << "Время создания списка: " << chrono::duration_cast<chrono::nanoseconds>(end - start).count() << " наносекунд" << endl;
            break;
        case 2:
            cout << "Введите в консоль элементы списка: " << endl;
            int elem;
            cin >> elem;
            while (elem != 100)
            {
                lst.Add(elem);
                cin >> elem;
            }
            lst.Show();
            break;
        case 3:
            while (true)
            {
                cout << "          Меню\n" <<
                    "1 - Вставить элемент в любую позицию списка \n" <<
                    "2 - Удалить любой элемент в списке \n" <<
                    "3 - Поменять 2 любых элемента в списке \n" <<
                    "4 - Вывести элемент списка  \n" <<
                    "5 - Выйти из программы\n" << endl;
                cin >> choice2;
                switch (choice2) {
                case 1:
                    cout << "Введите индес элемента: \n";
                    cin >> a;
                    cout << "Введите значение элемента: \n";
                    cin >> b;
                    start = chrono::steady_clock::now();
                    if (a == 1) {
                        lst.AddFirst(b);
                    }
                    else
                        lst.Input(a, b);
                    end = chrono::steady_clock::now();
                    lst.Show();
                    cout << "Время вставки элемента списка: " << chrono::duration_cast<chrono::nanoseconds>(end - start).count() << " наносекунд" << endl;
                    break;
                case 2:
                    cout << "Введите индекс для удаления элемента двусвязного списка: " << endl;
                    cin >> z;
                    start = chrono::steady_clock::now();
                    lst.DelIndex(z);
                    end = chrono::steady_clock::now();
                    lst.Show();
                    cout << "Время удаления элемента списка: " << chrono::duration_cast<chrono::nanoseconds>(end - start).count() << " наносекунд" << endl;
                    break;
                case 3:
                    cout << "Поменять 2 любых элемента в списке: " << endl;
                    cout << "Исходный список" << endl;
                    lst.Show();
                    int index, index2;
                    cout << "Введите индекс первого элемента: " << endl;
                    cin >> index;
                    cout << "Введите индекс второго элемента: " << endl;
                    cin >> index2;
                    lst.Swap(index, index2);
                    cout << "Измененный список: " << endl;
                    lst.Show();
                    break;
                case 4:
                    cout << "Введите индекс элемента, который хотите вывести" << endl;
                    int index3;
                    cin >> index3;
                    start = chrono::steady_clock::now();
                    lst.GetIndex(index3);
                    end = chrono::steady_clock::now();
                    lst.Show();
                    cout << "Время получения элемента списка: " << chrono::duration_cast<chrono::nanoseconds>(end - start).count() << " наносекунд" << endl;
                    break;
                case 5:

                    exit(0);
                }
            }
        case 4:

            exit(0);
        }
    }
    return 0;
}


